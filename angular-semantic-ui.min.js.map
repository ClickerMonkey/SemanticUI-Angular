/**
 * semantic-ui-angular-jquery - 0.2.1
 * Angular Directives for Semantic UI
 * 
 * https://github.com/ClickerMonkey/SemanticUI-Angular
 * Released under the MIT license.
 * Copyright 2017 Philip Diffenderfer and contributors.
 */
{"version":3,"sources":["sm.js","sm-core.js","checkbox/sm-checkbox.js","checkbox/sm-radio.js","accordion/sm-accordion.js","comment/sm-comment.js","dropdown/sm-dropdown.js","dimmer/sm-dimmer.js","embed/sm-embed.js","list/sm-list.js","menu/sm-menu.js","modal/sm-modal.js","progress/sm-progress.js","popup/sm-popup.js","rating/sm-rating.js","search/sm-search.js","shape/sm-shape.js","sidebar/sm-sidebar.js","sticky/sm-sticky.js","tab/sm-tab.js","timeago/sm-timeago.js","transition/sm-transition.js"],"names":["angular","module","app","SemanticUIFactory","$compile","SemanticUI","setDefaultFunction","scope","variable","attributes","func","triggerChange","element","initialized","$watch","updated","$evalAsync","trigger","bindAttribute","attribute","attr","onEvent","settings","evt","existing","undefined","result0","isFunction","apply","this","arguments","result1","linkEvents","defaults","linkings","scopeValue","linkSettings","settingsAttribute","forEach","value","key","createBind","restrict","link","initBind","ready","input","$eval","createBehavior","method","initBehavior","$","enabled","previousEvent","isString","isObject","isDefined","off","on","watcher","expression","context","force","equals","currentValue","copy","call","set","update","RecursiveCompiler","postLink","post","compiledContents","contents","remove","pre","clone","append","SemanticButton","replace","transclude","template","SemanticItem","icon","SemanticFlatMenu","join","SemanticHtml","$injector","sanitize","$sce","get","getTrustedHtml","trustAsHtml","e","attrs","smHtml","html","factory","directive","SemanticCheckboxBind","SemanticCheckbox","SemanticCheckboxLink","model","label","indeterminateValue","checkedValue","uncheckedValue","children","onInit","onChange","onChecked","onIndeterminate","onDeterminate","onUnchecked","onEnable","onDisable","enabledWatcher","checkbox","modelWatcher","fn","$children","settingChildren","change","checked","each","i","child","length","BEHAVIORS","smCheckboxToggle","smCheckboxCheck","smCheckboxUncheck","smCheckboxIndeterminate","smCheckboxDeterminate","smCheckboxEnable","smCheckboxDisable","SemanticRadioBind","SemanticRadio","SemanticRadioLink","name","hasClass","removeClass","smRadioCheck","smRadioEnable","smRadioDisable","SemanticAccordionBind","SemanticAccordion","SemanticAccordionLink","onOpening","onOpen","onClosing","onClose","accordion","SemanticAccordionGroup","required","title","active","smAccordionOpen","smAccordionCloseOthers","smAccordionClose","smAccordionToggle","SemanticComments","comments","content","avatar","author","date","replies","reply","collapsible","onAuthor","onReply","onShowReplies","onHideReplies","controller","compile","SemanticCommentsController","$scope","setCollapsed","comment","$event","collapse","$isCollapsed","hasReplies","getReplyCount","getShowRepliesText","count","getHideRepliesText","SemanticDropdownBind","SemanticDropdown","SemanticDropdownLink","items","defaultText","emptyValue","onAdd","onRemove","onLabelCreate","onLabelSelect","onNoResults","onShow","onHide","SemanticDropdownController","hashMap","getValue","item","getKey","$$hashKey","isEmpty","translateValue","translated","matching","findMatchingItem","hasDefault","getDefaultText","updateHashMap","$timeout","applyValue","dropdown","Array","translatedValue","push","locals","ignoreChange","modelArray","mapped","mappedValue","indexOf","inArray","splice","smDropdownToggle","smDropdownShow","smDropdownHide","smDropdownClear","smDropdownHideOthers","smDropdownRestoreDefaults","smDropdownRestoreDefaultText","smDropdownRestoreDefaultValue","smDropdownSaveDefaults","smDropdownSetSelected","smDropdownSetText","smDropdownSetValue","smDropdownBindTouchEvents","smDropdownMouseEvents","smDropdownBindIntent","smDropdownUnbindIntent","smDropdownSetActive","smDropdownSetVisible","smDropdownRemoveActive","smDropdownRemoveVisible","SemanticDimmerBind","SemanticDimmer","SemanticDimmerLink","visible","visibleWatcher","dimmer","smDimmerShow","smDimmerHide","smDimmerToggle","SemanticEmbedBind","SemanticEmbed","SemanticEmbedLink","source","sourceId","url","placeholder","onCreate","onDisplay","onPlaceholderDisplay","onEmbed","id","embed","smEmbedReset","smEmbedShow","smEmbedHide","smEmbedDestroy","SemanticList","SemanticListLink","description","image","header","headerHref","onHeader","has","headerLink","getChildCount","SemanticMenu","onClick","hidden","divider","SemanticMenuController","hasChildren","getChildren","getLabel","getIcon","getDescription","isHidden","isDivider","SemanticModalBind","SemanticModal","SemanticModalLink","onVisible","onHidden","onApprove","onDeny","modal","smModalShow","smModalHide","smModalToggle","smModalRefresh","smModalShowDimmer","smModalHideDimmer","smModalHideOthers","smModalHideAll","smModalCacheSizes","smModalSetActive","SemanticProgress","SemanticProgressLink","total","activeText","successText","errorText","warningText","duration","onSuccess","onActive","onError","onWarning","addText","property","text","progress","showActivity","smProgressIncrement","SemanticPopup","SemanticPopupLink","smPopup","smPopupTitle","smPopupHtml","smPopupPosition","smPopupVariation","smPopupSettings","smPopupOnInit","smPopupOnCreate","smPopupOnRemove","smPopupOnShow","smPopupOnVisible","smPopupOnHide","smPopupOnHidden","popup","SemanticPopupInline","SemanticPopupInlineLink","smPopupInline","smPopupInlineOnInit","smPopupInlineOnCreate","smPopupInlineOnRemove","smPopupInlineOnShow","smPopupInlineOnVisible","smPopupInlineOnHide","smPopupInlineOnHidden","inline","SemanticPopupDisplay","SemanticPopupDisplayLink","smPopupDisplay","smPopupDisplaySettings","smPopupDisplayOnInit","smPopupDisplayOnCreate","smPopupDisplayOnRemove","smPopupDisplayOnShow","smPopupDisplayOnVisible","smPopupDisplayOnHide","smPopupDisplayOnHidden","SemanticPopupDetached","smPopupShow","smPopupHide","smPopupHideAll","smPopupToggle","smPopupReposition","smPopupDestroy","smPopupRemove","SemanticRatingBind","SemanticRating","SemanticRatingLink","type","disabled","onRate","rating","valueWatcher","smRatingSet","smRatingDisable","smRatingEnable","smRatingClear","SemanticSearchBind","SemanticSearch","SemanticSearchLink","category","local","remote","onSelect","onResultsAdd","onSearchQuery","onResults","onResultsOpen","onResultsClose","defaultTitle","search","fields","textProperty","apiSettings","result","response","smSearchQuery","smSearchCancelQuery","smSearchSearchLocal","smSearchSearchRemote","smSearchSet","smSearchShowResults","smSearchHideResults","smSearchDestroy","SemanticShapeBind","SemanticShape","SemanticShapeLink","onBeforeChange","shape","smShapeFlipUp","smShapeFlipDown","smShapeFlipLeft","smShapeFlipRight","smShapeFlipOver","smShapeFlipBack","smShapeSetNextSide","smShapeReset","smShapeQueue","smShapeRepaint","smShapeSetDefaultSide","smShapeSetStageSize","smShapeRefresh","SemanticSidebarBind","SemanticSidebar","SemanticSidebarLink","sidebar","pusher","insertBefore","smSidebarShow","smSidebarHide","smSidebarToggle","smSidebarPushPage","smSidebarPullPage","smSidebarAddBodyCss","smSidebarRemoveBodyCss","SemanticStickyBind","SemanticSticky","SemanticStickyLink","onReposition","onScroll","onStick","onUnstick","onTop","onBottom","sticky","smStickyRefresh","SemanticTabBind","SemanticTabMenu","SemanticTabMenuLink","tabs","setActiveTab","tab","elements","hasActive","activeWatcher","SemanticTab","smTabSet","SemanticTimeAgo","getTime","hours","getHours","minutes","getMinutes","minutesPadded","HOURS","getTh","x","THS","getDaysAgo","Math","ceil","Date","MONTHS","timeout","updateText","now","today","getFullYear","getMonth","getDate","yesterday","elapsed","updateIn","minutesAgo","floor","daysAgo","clearTimeout","setTimeout","smTimeAgo","SemanticTransition","SemanticTransitionLink","smTransition","smTransitionEvents","smTransitionOther","transition"],"mappings":"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","file":"angular-semantic-ui.min.js","sourcesContent":["\r\nangular.module('semantic-ui', [\r\n  'semantic-ui-core',\r\n  'semantic-ui-accordion',\r\n  'semantic-ui-checkbox',\r\n  'semantic-ui-radio',\r\n  'semantic-ui-comment',\r\n  'semantic-ui-dimmer',\r\n  'semantic-ui-dropdown',\r\n  'semantic-ui-embed',\r\n  'semantic-ui-list',\r\n  'semantic-ui-menu',\r\n  'semantic-ui-modal',\r\n  'semantic-ui-popup',\r\n  'semantic-ui-progress',\r\n  'semantic-ui-rating',\r\n  'semantic-ui-search',\r\n  'semantic-ui-shape',\r\n  'semantic-ui-sidebar',\r\n  'semantic-ui-sticky',\r\n  'semantic-ui-tab',\r\n  'semantic-ui-transition',\r\n  'semantic-ui-timeago'\r\n]);\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticUI', ['$compile', SemanticUIFactory])\r\n    .directive('smButton', SemanticButton)\r\n    .directive('smMenuItem', SemanticItem)\r\n    .directive('smFlatMenu', SemanticFlatMenu)\r\n    .directive('smHtml', ['$injector', SemanticHtml])\r\n  ;\r\n\r\n  function SemanticUIFactory($compile)\r\n  {\r\n    var SemanticUI =\r\n    {\r\n      setDefaultFunction: function(scope, variable, attributes, func)\r\n      {\r\n        if ( !attributes[ variable ] )\r\n        {\r\n          scope[ variable ] = func;\r\n        }\r\n      },\r\n      triggerChange: function(scope, variable, element, initialized)\r\n      {\r\n        scope.$watch( variable, function(updated)\r\n        {\r\n          // Don't trigger the change event if the element hasn't been initialized.\r\n          if ( initialized )\r\n          {\r\n            // Trigger the change event during a digest cycle so any other\r\n            // variables that are changing this current digest cycle can finish.\r\n            scope.$evalAsync(function()\r\n            {\r\n              element.trigger('change');\r\n            });\r\n          }\r\n\r\n          initialized = true;\r\n        })\r\n      },\r\n      bindAttribute: function(scope, variable, element, attribute)\r\n      {\r\n        scope.$watch( variable, function(updated)\r\n        {\r\n          element.attr( attribute, updated );\r\n        });\r\n      },\r\n      onEvent: function(settings, evt, func)\r\n      {\r\n        settings[ evt ] = (function(existing, undefined)\r\n        {\r\n          return function EventHandler()\r\n          {\r\n            var result0 = undefined;\r\n\r\n            if ( angular.isFunction( existing ) )\r\n            {\r\n              result0 = existing.apply( this, arguments );\r\n            }\r\n\r\n            var result1 = func.apply( this, arguments );\r\n\r\n            return ( result0 !== undefined ? result0 : result1 );\r\n          }\r\n        })( settings[ evt ] );\r\n      },\r\n      linkEvents: function(scope, settings, defaults, linkings)\r\n      {\r\n        for (var evt in linkings)\r\n        {\r\n          (function(variable, evt)\r\n          {\r\n            SemanticUI.onEvent( settings, evt, function()\r\n            {\r\n              var scopeValue = scope[ variable ];\r\n\r\n              if ( angular.isFunction( scopeValue ) )\r\n              {\r\n                return scopeValue.apply( this, arguments );\r\n              }\r\n              else if ( angular.isFunction( defaults[ evt ] ) )\r\n              {\r\n                return defaults[ evt ].apply( this, arguments );\r\n              }\r\n            });\r\n\r\n          })( linkings[ evt ], evt );\r\n        }\r\n      },\r\n      linkSettings: function(scope, element, attributes, module, initialized, settingsAttribute)\r\n      {\r\n        var settings = settingsAttribute || 'settings';\r\n\r\n        if ( settings in attributes )\r\n        {\r\n          scope.$watch( settings, function( updated )\r\n          {\r\n            if ( initialized )\r\n            {\r\n              angular.forEach( updated, function(value, key)\r\n              {\r\n                element[ module ]( 'setting', key, value );\r\n              });\r\n            }\r\n\r\n            initialized = true;\r\n\r\n          }, true );\r\n        }\r\n      },\r\n      createBind: function(attribute, module)\r\n      {\r\n        return {\r\n\r\n          restrict: 'A',\r\n\r\n          link: function(scope, element, attributes)\r\n          {\r\n            SemanticUI.linkSettings( scope, element, attributes, module, false, attribute );\r\n            SemanticUI.initBind( scope, element, attributes, attribute, module );\r\n          }\r\n        };\r\n      },\r\n      initBind: function(scope, element, attributes, attribute, module)\r\n      {\r\n        element.ready(function()\r\n        {\r\n          var settings = {};\r\n          var input = attributes[ attribute ];\r\n\r\n          if ( input )\r\n          {\r\n            settings = scope.$eval( input );\r\n          }\r\n\r\n          element[ module ]( settings );\r\n        });\r\n      },\r\n      createBehavior: function(attribute, module, method)\r\n      {\r\n        return {\r\n\r\n          restrict: 'A',\r\n\r\n          link: function(scope, element, attributes)\r\n          {\r\n            SemanticUI.initBehavior( scope, attributes, attribute, element, module, method );\r\n          }\r\n        };\r\n      },\r\n      initBehavior: function(scope, attributes, attribute, element, module, method)\r\n      {\r\n        // Default settings on the attribute.\r\n        var settings = {\r\n          $: undefined,\r\n          evt: 'click',\r\n          enabled: true,\r\n          value: undefined\r\n        };\r\n\r\n        var onEvent = function()\r\n        {\r\n          // If the trigger is currently enabled...\r\n          if ( settings.enabled )\r\n          {\r\n            // Call the method on the module.\r\n            $( settings.$ )[ module ]( method, settings.value );\r\n          }\r\n        };\r\n\r\n        var previousEvent = false;\r\n\r\n        scope.$watch( attributes[ attribute ], function(input)\r\n        {\r\n          // If the attribute value is a string, take it as the selector\r\n          if ( angular.isString( input ) )\r\n          {\r\n            settings.$ = input;\r\n          }\r\n          // If the attribute value is an object, overwrite the defaults.\r\n          else if ( angular.isObject( input ) )\r\n          {\r\n            if ( !angular.isString( input.evt ) ) input.evt = settings.evt;\r\n            if ( !angular.isDefined( input.enabled ) ) input.enabled = settings.enabled;\r\n\r\n            settings = input;\r\n          }\r\n\r\n          if ( previousEvent )\r\n          {\r\n            element.off( previousEvent, onEvent );\r\n          }\r\n\r\n          element.on( previousEvent = settings.evt, onEvent );\r\n\r\n        }, true );\r\n      },\r\n      watcher: function (scope, expression, func, context, force, equals) \r\n      {\r\n          var currentValue = angular.copy(scope[expression]);\r\n\r\n          scope.$watch(expression, function (updated) \r\n          {\r\n              if (!angular.equals(currentValue, updated)) \r\n              {\r\n                  func.call(context, updated);\r\n              }\r\n\r\n          }, equals);\r\n\r\n          return {\r\n              set: function (value) \r\n              {\r\n                  if (scope[expression] != value || force) \r\n                  {\r\n                      scope.$evalAsync(function () \r\n                      {\r\n                          scope[expression] = value;\r\n                          currentValue = angular.copy(scope[expression]);\r\n                      });\r\n                  }\r\n              },\r\n              update: function () \r\n              {\r\n                  scope.$evalAsync(function () \r\n                  {\r\n                  });\r\n              }\r\n          }\r\n      },\r\n      RecursiveCompiler: function(postLink)\r\n      {\r\n        return function(element, link)\r\n        {\r\n          // Normalize the link parameter\r\n          if( angular.isFunction( link ) )\r\n          {\r\n              link = { post: link };\r\n          }\r\n\r\n          // Break the recursion loop by removing the contents\r\n          var contents = element.contents().remove();\r\n          var compiledContents;\r\n\r\n          return {\r\n              pre: (link && link.pre) ? link.pre : null,\r\n              /**\r\n               * Compiles and re-adds the contents\r\n               */\r\n              post: function(scope, element)\r\n              {\r\n                  // Compile the contents\r\n                  if( !compiledContents )\r\n                  {\r\n                      compiledContents = $compile(contents);\r\n                  }\r\n\r\n                  // Re-add the compiled contents to the element\r\n                  compiledContents( scope, function(clone)\r\n                  {\r\n                      element.append(clone);\r\n                  });\r\n\r\n                  // Call the post-linking function, if any\r\n                  if ( link && link.post )\r\n                  {\r\n                      link.post.apply( null, arguments );\r\n                  }\r\n\r\n                  if ( angular.isFunction( postLink ) )\r\n                  {\r\n                    postLink.apply( null, arguments );\r\n                  }\r\n              }\r\n          };\r\n        };\r\n      }\r\n    };\r\n\r\n    return SemanticUI;\r\n  }\r\n\r\n  function SemanticButton()\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      template: '<button class=\"ui button\" ng-transclude></button>'\r\n    };\r\n  }\r\n\r\n  function SemanticItem()\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        icon: '@'\r\n      },\r\n\r\n      template: '<a class=\"item\"><i class=\"{{ icon }} icon\" ng-if=\"icon\"></i><span ng-transclude></span></a>'\r\n    }\r\n  }\r\n\r\n  function SemanticFlatMenu()\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      template: [\r\n        '<div class=\"menu\">',\r\n        '  <div class=\"item\" ng-repeat=\"item in items\" data-value=\"{{ getValue(item) }}\" sm-html=\"label({item:item})\"></div>',\r\n        '</div>'\r\n      ].join('\\n')\r\n    }\r\n  }\r\n\r\n  function SemanticHtml($injector)\r\n  {\r\n    var sanitize = function(value)\r\n    {\r\n      return value;\r\n    };\r\n\r\n    try\r\n    {\r\n      $sce = $injector.get('$sce');\r\n\r\n      sanitize = function(value)\r\n      {\r\n        return $sce.getTrustedHtml( $sce.trustAsHtml( value ) );\r\n      };\r\n    }\r\n    catch (e)\r\n    {\r\n      // ignore\r\n    }\r\n\r\n    return function(scope, element, attrs)\r\n    {\r\n      scope.$watch( attrs.smHtml, function(value)\r\n      {\r\n        element.html( sanitize( value || '' ) );\r\n      });\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-core', []) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticCheckboxLink', ['SemanticUI', SemanticCheckboxLink])\r\n    .directive('smCheckboxBind', ['SemanticUI', SemanticCheckboxBind])\r\n    .directive('smCheckbox', ['SemanticCheckboxLink', SemanticCheckbox])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smCheckboxToggle:            'toggle',\r\n    smCheckboxCheck:             'check',\r\n    smCheckboxUncheck:           'uncheck',\r\n    smCheckboxIndeterminate:     'indeterminate',\r\n    smCheckboxDeterminate:       'determinate',\r\n    smCheckboxEnable:            'enable',\r\n    smCheckboxDisable:           'disable'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'checkbox', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticCheckboxBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smCheckboxBind', 'checkbox' );\r\n  }\r\n\r\n  function SemanticCheckbox(SemanticCheckboxLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        /* Required */\r\n        model: '=',\r\n        label: '@',\r\n        /* Optional */\r\n        settings: '=',\r\n        enabled: '=',\r\n        indeterminateValue: '=',\r\n        checkedValue: '=',\r\n        uncheckedValue: '=',\r\n        children: '@',\r\n        onInit: '=',\r\n        /* Events */\r\n        onChange:        '=',\r\n        onChecked:       '=',\r\n        onIndeterminate: '=',\r\n        onDeterminate:   '=',\r\n        onUnchecked:     '=',\r\n        onEnable:        '=',\r\n        onDisable:       '='\r\n      },\r\n\r\n      template: [\r\n        '<div class=\"ui checkbox\">',\r\n        '  <input type=\"checkbox\">',\r\n        '  <label>{{ label }}</label>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      link: SemanticCheckboxLink\r\n    };\r\n  }\r\n\r\n  function SemanticCheckboxLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      element.ready(function()\r\n      {\r\n        var settings = scope.settings || {};\r\n\r\n        SemanticUI.linkSettings( scope, element, attributes, 'checkbox', true );\r\n\r\n        SemanticUI.triggerChange( scope, 'model', element, true );\r\n\r\n        var checkedValue = function() {\r\n          return angular.isDefined( scope.checkedValue ) ? scope.checkedValue : true;\r\n        };\r\n        var uncheckedValue = function() {\r\n          return angular.isDefined( scope.uncheckedValue ) ? scope.uncheckedValue : false;\r\n        };\r\n        var indeterminateValue = function() {\r\n          return angular.isDefined( scope.indeterminateValue ) ? scope.indeterminateValue : void 0;\r\n        };\r\n\r\n        if ( attributes.enabled )\r\n        {\r\n          var enabledWatcher = SemanticUI.watcher( scope, 'enabled',\r\n            function(updated) {\r\n              if ( angular.isDefined( updated ) ) {\r\n                element.checkbox( updated ? 'set enabled' : 'set disabled' );\r\n              }\r\n            }\r\n          );\r\n\r\n          SemanticUI.onEvent( settings, 'onEnable',\r\n            function(value) {\r\n              enabledWatcher.set( true );\r\n            }\r\n          );\r\n\r\n          SemanticUI.onEvent( settings, 'onDisable',\r\n            function(value) {\r\n              enabledWatcher.set( false );\r\n            }\r\n          );\r\n        }\r\n\r\n        var modelWatcher = SemanticUI.watcher( scope, 'model',\r\n          function(updated) {\r\n            if ( angular.isDefined( updated ) ) {\r\n              element.checkbox( updated ? 'set checked' : 'set unchecked' );\r\n            }\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onChecked',\r\n          function() {\r\n            modelWatcher.set( checkedValue() );\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onUnchecked',\r\n          function() {\r\n            modelWatcher.set( uncheckedValue() );\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onIndeterminate',\r\n          function() {\r\n            modelWatcher.set( indeterminateValue() );\r\n          }\r\n        );\r\n\r\n        SemanticUI.linkEvents( scope, settings, $.fn.checkbox.settings, {\r\n          onChange:        'onChange',\r\n          onChecked:       'onChecked',\r\n          onIndeterminate: 'onIndeterminate',\r\n          onDeterminate:   'onDeterminate',\r\n          onUnchecked:     'onUnchecked',\r\n          onEnable:        'onEnable',\r\n          onDisable:       'onDisable'\r\n        });\r\n\r\n        // If the checkbox has children, link the value of this checkbox to the children\r\n        if ( scope.children )\r\n        {\r\n          var $children = $( scope.children );\r\n          var settingChildren = false;\r\n\r\n          SemanticUI.onEvent( settings, 'onChecked',\r\n            function() {\r\n              settingChildren = true;\r\n              $children.checkbox( 'check' );\r\n              settingChildren = false;\r\n            }\r\n          );\r\n          SemanticUI.onEvent( settings, 'onUnchecked',\r\n            function() {\r\n              settingChildren = true;\r\n              $children.checkbox( 'uncheck' );\r\n              settingChildren = false;\r\n            }\r\n          );\r\n\r\n          $children.children('input[type=checkbox], input[type=radio]')\r\n            .change(function() {\r\n\r\n              if ( settingChildren ) {\r\n                return;\r\n              }\r\n\r\n              var checked = 0;\r\n\r\n              $children.each(function(i, child) {\r\n                if ( $( child ).checkbox( 'is checked') ) {\r\n                  checked++;\r\n                }\r\n              });\r\n\r\n              if ( checked === 0 ) {\r\n                element.checkbox( 'uncheck' );\r\n              }\r\n              else if ( checked === $children.length ) {\r\n                element.checkbox( 'check' );\r\n              }\r\n              else {\r\n                element.checkbox( 'indeterminate' );\r\n              }\r\n            })\r\n          ;\r\n        }\r\n\r\n        // Initialize the element with the given settings.\r\n        element.checkbox( settings );\r\n\r\n        // Set initial state of the checkbox\r\n        if ( scope.model == checkedValue() )\r\n        {\r\n          element.checkbox( 'set checked' );\r\n        }\r\n        else if ( scope.model === indeterminateValue() )\r\n        {\r\n          element.checkbox( 'set indeterminate' );\r\n        }\r\n\r\n        if ( angular.isDefined( scope.enabled ) && !scope.enabled )\r\n        {\r\n          element.checkbox( 'set disabled' );\r\n        }\r\n\r\n        if ( angular.isFunction( scope.onInit ) ) {\r\n          scope.onInit( element );\r\n        }\r\n      });\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-checkbox', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticRadioLink', ['SemanticUI', SemanticRadioLink])\r\n    .directive('smRadioBind', ['SemanticUI', SemanticRadioBind])\r\n    .directive('smRadio', ['SemanticRadioLink', SemanticRadio])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smRadioCheck:             'check',\r\n    smRadioEnable:            'enable',\r\n    smRadioDisable:           'disable'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'checkbox', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticRadioBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smRadioBind', 'checkbox' );\r\n  }\r\n\r\n  function SemanticRadio(SemanticRadioLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        /* Required */\r\n        model: '=',\r\n        label: '@',\r\n        name: '@',\r\n        value: '=',\r\n        /* Optional */\r\n        settings: '=',\r\n        enabled: '=',\r\n        onInit: '=',\r\n        /* Events */\r\n        onChange:        '=',\r\n        onChecked:       '=',\r\n        onUnchecked:     '=',\r\n        onEnable:        '=',\r\n        onDisable:       '='\r\n      },\r\n\r\n      template: [\r\n        '<div class=\"ui radio checkbox\">',\r\n        '  <input name=\"{{ name }}\" type=\"radio\">',\r\n        '  <label>{{ label }}</label>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      link: SemanticRadioLink\r\n    };\r\n  }\r\n\r\n  function SemanticRadioLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      element.ready(function()\r\n      {\r\n        var settings = scope.settings || {};\r\n\r\n        SemanticUI.linkSettings( scope, element, attributes, 'checkbox', true );\r\n\r\n        SemanticUI.triggerChange( scope, 'model', element, true );\r\n\r\n        if ( attributes.enabled )\r\n        {\r\n          var enabledWatcher = SemanticUI.watcher( scope, 'enabled',\r\n            function(updated) {\r\n              if ( angular.isDefined( updated ) ) {\r\n                element.checkbox( updated ? 'set enabled' : 'set disabled' );\r\n              }\r\n            }\r\n          );\r\n\r\n          SemanticUI.onEvent( settings, 'onEnable',\r\n            function(value) {\r\n              enabledWatcher.set( true );\r\n            }\r\n          );\r\n\r\n          SemanticUI.onEvent( settings, 'onDisable',\r\n            function(value) {\r\n              enabledWatcher.set( false );\r\n            }\r\n          );\r\n        }\r\n\r\n        var modelWatcher = SemanticUI.watcher( scope, 'model',\r\n          function(updated) {\r\n            if ( updated === scope.value ) {\r\n              element.checkbox( 'set checked' );\r\n            }\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onChecked',\r\n          function() {\r\n            modelWatcher.set( scope.value );\r\n          }\r\n        );\r\n\r\n        SemanticUI.linkEvents( scope, settings, $.fn.checkbox.settings, {\r\n          onChange:        'onChange',\r\n          onChecked:       'onChecked',\r\n          onUnchecked:     'onUnchecked',\r\n          onEnable:        'onEnable',\r\n          onDisable:       'onDisable'\r\n        });\r\n\r\n        // Initialize the element with the given settings.\r\n        element.checkbox( settings );\r\n\r\n        // Set initial state of the radio\r\n        if ( scope.model === scope.value )\r\n        {\r\n          element.checkbox( 'set checked' );\r\n        }\r\n\r\n        // If the radio is a slider, remove the radio class\r\n        if ( element.hasClass( 'slider' ) )\r\n        {\r\n          element.removeClass( 'radio' );\r\n        }\r\n\r\n        if ( angular.isDefined( scope.enabled ) && !scope.enabled )\r\n        {\r\n          element.checkbox( 'set disabled' );\r\n        }\r\n\r\n        if ( angular.isFunction( scope.onInit ) ) {\r\n          scope.onInit( element );\r\n        }\r\n      });\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-radio', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticAccordionLink', ['SemanticUI', SemanticAccordionLink])\r\n    .directive('smAccordionBind', ['SemanticUI', SemanticAccordionBind])\r\n    .directive('smAccordion', ['SemanticAccordionLink', SemanticAccordion])\r\n    .directive('smAccordionGroup', SemanticAccordionGroup)\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smAccordionOpen:        'open',\r\n    smAccordionCloseOthers: 'close others',\r\n    smAccordionClose:       'close',\r\n    smAccordionToggle:      'toggle'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'accordion', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticAccordionBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smAccordionBind', 'accordion' );\r\n  }\r\n\r\n  function SemanticAccordion(SemanticAccordionLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        /* Optional */\r\n        settings: '=',\r\n        onInit: '=',\r\n        /* Events */\r\n        onOpening: '=',\r\n        onOpen: '=',\r\n        onClosing: '=',\r\n        onClose: '=',\r\n        onChange: '='\r\n      },\r\n\r\n      template: '<div class=\"ui accordion\" ng-transclude></div>',\r\n\r\n      link: SemanticAccordionLink\r\n    };\r\n  }\r\n\r\n  function SemanticAccordionLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      element.ready(function()\r\n      {\r\n        var settings = scope.settings || {};\r\n\r\n        SemanticUI.linkSettings( scope, element, attributes, 'accordion', true );\r\n\r\n        SemanticUI.linkEvents( scope, settings, $.fn.accordion.settings, {\r\n          onOpening:  'onOpening',\r\n          onOpen:     'onOpen',\r\n          onClosing:  'onClosing',\r\n          onClose:    'onClose',\r\n          onChange:   'onChange'\r\n        });\r\n\r\n        element.accordion( settings );\r\n\r\n        if ( angular.isFunction( scope.onInit ) )\r\n        {\r\n          scope.onInit( element );\r\n        }\r\n      });\r\n    };\r\n  }\r\n\r\n  function SemanticAccordionGroup()\r\n  {\r\n    return {\r\n      restrict: 'E',\r\n      required: 'title',\r\n      transclude: true,\r\n      scope: {\r\n        /* Required */\r\n        title: '=',\r\n        /* Optional */\r\n        active: '='\r\n      },\r\n      template: [\r\n        '<div class=\"title\" ng-class=\"{active: active}\">',\r\n        '  <i class=\"dropdown icon\"></i>',\r\n        '  {{ title }}',\r\n        '</div>',\r\n        '<div class=\"content\" ng-class=\"{active: active}\" ng-transclude>',\r\n        '</div>'\r\n      ].join('\\n')\r\n    }\r\n  }\r\n\r\n})( angular.module('semantic-ui-accordion', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .controller('SemanticCommentsController', ['$scope', SemanticCommentsController])\r\n    .directive('smComments', ['SemanticUI', SemanticComments])\r\n  ;\r\n\r\n  function SemanticComments(SemanticUI)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      // transclude: true,\r\n\r\n      scope: {\r\n        /* Required */\r\n        comments: '=',\r\n        content: '&',\r\n        /* Optional */\r\n        avatar: '&',\r\n        author: '&',\r\n        date: '&',\r\n        replies: '&',\r\n        reply: '=',\r\n        collapsible: '=',\r\n\r\n        onAuthor: '&',\r\n        onReply: '&',\r\n        onShowReplies: '&',\r\n        onHideReplies: '&'\r\n      },\r\n\r\n      template: [\r\n        '<div class=\"ui comments\">',\r\n        ' <div class=\"comment\" ng-repeat=\"c in comments\" ng-init=\"$ = {comment: c}; c.$isCollapsed = true;\">',\r\n        '  <a ng-if=\"avatar($)\" class=\"avatar\" ng-click=\"onAuthor({comment: c, $event: $event})\">',\r\n        '    <img ng-src=\"{{ avatar($) }}\">',\r\n        '  </a>',\r\n        '  <div class=\"content\">',\r\n        '   <a class=\"author\" ng-click=\"onAuthor({comment: c, $event: $event})\" sm-html=\"author($)\"></a>',\r\n        '   <div class=\"metadata\">',\r\n        '    <span class=\"date\" sm-time-ago=\"date($)\"></span>',\r\n        '   </div>',\r\n        '   <div class=\"text\" sm-html=\"content($)\"></div>',\r\n        '   <div class=\"actions\">',\r\n        '     <a class=\"reply\" ng-click=\"onReply({comment: c, $event: $event})\" ng-if=\"reply\">Reply</a>',\r\n        '     <a class=\"show-replies\" ng-if=\"reply && collapsible && c.$isCollapsed\" href ng-click=\"setCollapsed(c, $event, false)\" sm-html=\"getShowRepliesText($)\"></a>',\r\n        '     <a class=\"hide-replies\" ng-if=\"reply && collapsible && !c.$isCollapsed\" href ng-click=\"setCollapsed(c, $event, true)\" sm-html=\"getHideRepliesText($)\"></a>',\r\n        '   </div>',\r\n        '  </div>',\r\n        '  <sm-comments ng-if=\"hasReplies($)\" ng-class=\"{collapsed: collapsible && c.$isCollapsed}\" comments=\"replies($)\" content=\"content({comment: comment})\" avatar=\"avatar({comment: comment})\" author=\"author({comment: comment})\" date=\"date({comment: comment})\" replies=\"replies({comment: comment})\" reply=\"reply\" collapsible=\"collapsible\"',\r\n        '     on-author=\"onAuthor({comment: comment, $event: $event})\" on-reply=\"onReply({comment: comment, $event: $event})\" on-show-replies=\"onShowReplies({comment: comment, $event: $event})\" on-hide-replies=\"onHideReplies({comment: comment, $event: $event})\"></sm-comments>',\r\n        ' </div>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      controller: 'SemanticCommentsController',\r\n\r\n      compile: SemanticUI.RecursiveCompiler()\r\n\r\n    };\r\n  }\r\n\r\n  function SemanticCommentsController($scope)\r\n  {\r\n    $scope.setCollapsed = function(comment, $event, collapse)\r\n    {\r\n      var $ = {comment: comment, $event: $event};\r\n\r\n      if ( comment.$isCollapsed != collapse )\r\n      {\r\n        if ( comment.$isCollapsed )\r\n        {\r\n          if ( $scope.onShowReplies($) !== false )\r\n          {\r\n            comment.$isCollapsed = false;\r\n          }\r\n        }\r\n        else\r\n        {\r\n          if ( $scope.onHideReplies($) !== false )\r\n          {\r\n            comment.$isCollapsed = true;\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    $scope.hasReplies = function($)\r\n    {\r\n      if ( !$scope.reply )\r\n      {\r\n        return false;\r\n      }\r\n\r\n      var replies = $scope.replies($);\r\n\r\n      return replies && replies.length;\r\n    };\r\n\r\n    $scope.getReplyCount = function($)\r\n    {\r\n      if ( !$scope.reply )\r\n      {\r\n        return false;\r\n      }\r\n\r\n      var replies = $scope.replies($);\r\n\r\n      return replies ? replies.length : 0;\r\n    };\r\n\r\n    $scope.getShowRepliesText = function($)\r\n    {\r\n      var count = $scope.getReplyCount($);\r\n\r\n      return count === 0 ? '' : (count === 1 ? 'Show Reply' : 'Show Replies (' + count + ')');\r\n    };\r\n\r\n    $scope.getHideRepliesText = function($)\r\n    {\r\n      var count = $scope.getReplyCount($);\r\n\r\n      return count === 0 ? '' : (count === 1 ? 'Hide Reply' : 'Hide Replies (' + count + ')');\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-comment', ['semantic-ui-core', 'semantic-ui-timeago']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .controller('SemanticDropdownController', ['$scope', SemanticDropdownController])\r\n    .factory('SemanticDropdownLink', ['SemanticUI', '$timeout', SemanticDropdownLink])\r\n    .directive('smDropdownBind', ['SemanticUI', SemanticDropdownBind])\r\n    .directive('smDropdown', ['SemanticDropdownLink', SemanticDropdown])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smDropdownToggle:               'toggle',\r\n    smDropdownShow:                 'show',\r\n    smDropdownHide:                 'hide',\r\n    smDropdownClear:                'clear',\r\n    smDropdownHideOthers:           'hide others',\r\n    smDropdownRestoreDefaults:      'restore defaults',\r\n    smDropdownRestoreDefaultText:   'restore default text',\r\n    smDropdownRestoreDefaultValue:  'restore default value',\r\n    smDropdownSaveDefaults:         'save defaults',\r\n    smDropdownSetSelected:          'set selected',\r\n    smDropdownSetText:              'set text',\r\n    smDropdownSetValue:             'set value',\r\n    smDropdownBindTouchEvents:      'bind touch events',\r\n    smDropdownMouseEvents:          'mouse events',\r\n    smDropdownBindIntent:           'bind intent',\r\n    smDropdownUnbindIntent:         'unbind intent',\r\n    smDropdownSetActive:            'set active',\r\n    smDropdownSetVisible:           'set visible',\r\n    smDropdownRemoveActive:         'remove active',\r\n    smDropdownRemoveVisible:        'remove visible'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'dropdown', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticDropdownBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smDropdownBind', 'dropdown' );\r\n  }\r\n\r\n  function SemanticDropdown(SemanticDropdownLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        /* Required */\r\n        model: '=',\r\n        items: '=',\r\n        label: '&',\r\n        value: '&',\r\n        /* Optional */\r\n        settings: '=',\r\n        defaultText: '=',\r\n        onInit: '=',\r\n        emptyValue: '=',\r\n        /* Events */\r\n        onChange: '=',\r\n        onAdd: '=',\r\n        onRemove: '=',\r\n        onLabelCreate: '=',\r\n        onLabelSelect: '=',\r\n        onNoResults: '=',\r\n        onShow: '=',\r\n        onHide: '='\r\n      },\r\n\r\n      template: [\r\n        '<div class=\"ui dropdown\">',\r\n          '<i class=\"dropdown icon\"></i>',\r\n          '<div class=\"text\" ng-class=\"::{default: hasDefault()}\" sm-html=\"::getDefaultText()\"></div>',\r\n          '<sm-flat-menu></sm-flat-menu>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      controller: 'SemanticDropdownController',\r\n\r\n      link: SemanticDropdownLink\r\n    };\r\n  }\r\n\r\n  function SemanticDropdownController($scope)\r\n  {\r\n    var hashMap = {};\r\n\r\n    // Returns the value to be placed in the data-value attribute. If the computed value has a $$hashKey,\r\n    // then return the hashKey. This enables the exact instance of the item to be set to the model.\r\n    $scope.getValue = function(item)\r\n    {\r\n      // Computes the value given the expression in the 'value' attribute\r\n      return $scope.getKey( $scope.value( {item: item} ) );\r\n    };\r\n\r\n    $scope.getKey = function(value)\r\n    {\r\n      return (value ? value.$$hashKey || value : value) + '';\r\n    };\r\n\r\n    $scope.isEmpty = function()\r\n    {\r\n      return !$scope.model || $scope.model.length === 0;\r\n    };\r\n\r\n    // Translates the value (the model, an item of the model, or a variable\r\n    // created from the value function) into the key that's stored on the dropdown.\r\n    $scope.translateValue = function(value)\r\n    {\r\n      var translated = $scope.getKey( value );\r\n      var matching = $scope.findMatchingItem( translated );\r\n\r\n      if ( angular.isDefined( matching ) )\r\n      {\r\n        return $scope.getValue( matching );\r\n      }\r\n    };\r\n\r\n    // Determines whether this dropdown should currently display the default text.\r\n    $scope.hasDefault = function()\r\n    {\r\n      return ( $scope.defaultText && $scope.isEmpty() );\r\n    };\r\n\r\n    // Gets the current text for the drop down. If the current model has a value which is found\r\n    // in the items, the appropriate item's label is displayed. Otherwise return the default text.\r\n    $scope.getDefaultText = function()\r\n    {\r\n      var defaultText = $scope.defaultText ? $scope.defaultText : '';\r\n      return ( $scope.isEmpty() ? defaultText : $scope.findMatchingItem($scope.model) );\r\n    };\r\n\r\n    // Finds an item instance that has the exact same value as the given value.\r\n    $scope.findMatchingItem = function(value)\r\n    {\r\n      return hashMap[ value ];\r\n    };\r\n\r\n    // Updates the hash map providing a mapping from values to items.\r\n    $scope.updateHashMap = function( items )\r\n    {\r\n      hashMap = {};\r\n\r\n      angular.forEach( items, function(item)\r\n      {\r\n        hashMap[ $scope.getValue( item ) ] = item;\r\n      });\r\n    };\r\n  }\r\n\r\n  function SemanticDropdownLink(SemanticUI, $timeout)\r\n  {\r\n    return function (scope, element, attributes) {\r\n      var applyValue = function (value) {\r\n        $timeout(function () {\r\n          if (!value) {\r\n            element.dropdown('clear');\r\n          } \r\n          else if (element.dropdown('is multiple')) {\r\n            if (value instanceof Array) {\r\n              var translatedValue = [];\r\n\r\n              for (var i = 0; i < value.length; i++) {\r\n                var translated = scope.translateValue(value[ i ]);\r\n\r\n                if (angular.isDefined(translated)) {\r\n                  translatedValue.push(translated);\r\n                }\r\n              }\r\n\r\n              element.dropdown('set exactly', translatedValue);\r\n            }\r\n          } else {\r\n            element.dropdown('set selected', scope.translateValue(value));\r\n          }\r\n        }, 0);\r\n      };\r\n\r\n      SemanticUI.setDefaultFunction( scope, 'label', attributes, function(locals){return locals.item} );\r\n      SemanticUI.setDefaultFunction( scope, 'value', attributes, function(locals){return locals.item} );\r\n\r\n      element.ready(function()\r\n      {\r\n        var settings = scope.settings || {};\r\n        var ignoreChange = true;\r\n\r\n        SemanticUI.linkSettings( scope, element, attributes, 'dropdown', true );\r\n\r\n        SemanticUI.triggerChange( scope, 'model', element, true );\r\n\r\n        // Returns the model on the scope, converting it to an array if it's not one.\r\n        var modelArray = function() {\r\n          if ( !(scope.model instanceof Array) ) {\r\n            scope.model = scope.model ? [ scope.model ] : [];\r\n          }\r\n          return scope.model;\r\n        };\r\n\r\n        // When the model changes, set the value on the drop down\r\n        var modelWatcher = SemanticUI.watcher( scope, 'model',\r\n          function(updated) {\r\n            applyValue( updated );\r\n          }\r\n        , null, true, true );\r\n\r\n        // Inject an onChange function into the settings which sets the model value\r\n        // and causes the scope to be updated.\r\n        SemanticUI.onEvent( settings, 'onChange',\r\n          function(value) {\r\n            if ( ignoreChange ) {\r\n              return;\r\n            }\r\n            if ( !element.dropdown('is multiple') ) {\r\n              var mapped = scope.findMatchingItem( value );\r\n              if (angular.isDefined(mapped)) {\r\n                var mappedValue = scope.value({item: mapped});\r\n                modelWatcher.set( mappedValue );\r\n              } else if ( element.dropdown('setting', 'allowAdditions') ) {\r\n                modelWatcher.set( value );\r\n              } else {\r\n                modelWatcher.set( scope.emptyValue );\r\n              }\r\n            }\r\n          }\r\n        );\r\n\r\n        // When a new item is selected for multiple selection dropdowns, add it to the model.\r\n        SemanticUI.onEvent( settings, 'onAdd',\r\n          function(value) {\r\n            if ( ignoreChange ) {\r\n              return;\r\n            }\r\n            var mapped = scope.findMatchingItem( value );\r\n            if (angular.isDefined(mapped)) {\r\n              var mappedValue = scope.value({item: mapped});\r\n              var indexOf = $.inArray( mappedValue, modelArray() );\r\n              if ( indexOf === -1 ) {\r\n                scope.model.push( mappedValue );\r\n                modelWatcher.update();\r\n              }\r\n            } else if ( element.dropdown('setting', 'allowAdditions') ) {\r\n              scope.model.push( value );\r\n              modelWatcher.update();\r\n            }\r\n          }\r\n        );\r\n\r\n        // When an item is deselected for multiple selection dropdowns, remove it from the model.\r\n        SemanticUI.onEvent( settings, 'onRemove',\r\n          function(value) {\r\n            if ( ignoreChange ) {\r\n              return;\r\n            }\r\n            var mapped = scope.findMatchingItem( value );\r\n            if (angular.isDefined(mapped)) {\r\n              var mappedValue = scope.value({item: mapped});\r\n              var indexOf = $.inArray( mappedValue, modelArray() );\r\n              if ( indexOf !== -1 ) {\r\n                scope.model.splice( indexOf, 1 );\r\n                modelWatcher.update();\r\n              }\r\n            } else {\r\n              var indexOf = $.inArray( value, modelArray() );\r\n              if ( indexOf !== -1 ) {\r\n                scope.model.splice( indexOf, 1 );\r\n                modelWatcher.update();\r\n              }\r\n            }\r\n          }\r\n        );\r\n\r\n        SemanticUI.linkEvents( scope, settings, $.fn.dropdown.settings, {\r\n          onChange:       'onChange',\r\n          onAdd:          'onAdd',\r\n          onRemove:       'onRemove',\r\n          onLabelCreate:  'onLabelCreate',\r\n          onLabelSelect:  'onLabelSelect',\r\n          onNoResults:    'onNoResults',\r\n          onShow:         'onShow',\r\n          onHide:         'onHide'\r\n        });\r\n\r\n        // When items changes, rebuild the hashMap & reapply the values.\r\n        scope.$watch( 'items', function( updated )\r\n        {\r\n          scope.updateHashMap( scope.items );\r\n          applyValue( scope.model );\r\n\r\n        }, true );\r\n\r\n        // Initialize the element with the given settings.\r\n        element.dropdown( settings );\r\n\r\n        // Update the hashmap with items\r\n        scope.updateHashMap( scope.items );\r\n\r\n        // Apply current value\r\n        applyValue( scope.model );\r\n\r\n        // Save defaults\r\n        element.dropdown( 'save defaults' );\r\n\r\n        // Stop ignoring changes!\r\n        ignoreChange = false;\r\n\r\n        // Notify initialized callback.\r\n        if ( angular.isFunction( scope.onInit ) )\r\n        {\r\n          scope.onInit( element );\r\n        }\r\n\r\n      });\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-dropdown', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticDimmerLink', ['SemanticUI', SemanticDimmerLink])\r\n    .directive('smDimmerBind', ['SemanticUI', SemanticDimmerBind])\r\n    .directive('smDimmer', ['SemanticDimmerLink', SemanticDimmer])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smDimmerShow:           'show',\r\n    smDimmerHide:           'hide',\r\n    smDimmerToggle:         'toggle'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'dimmer', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticDimmerBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smDimmerBind', 'dimmer' );\r\n  }\r\n\r\n  function SemanticDimmer(SemanticDimmerLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        /* Optional */\r\n        visible: '=',\r\n        settings: '=',\r\n        onInit: '=',\r\n        /* Events */\r\n        onShow: '=',\r\n        onHide: '=',\r\n        onChange: '='\r\n      },\r\n\r\n      template: '<div class=\"ui dimmer\" ng-transclude></div>',\r\n\r\n      link: SemanticDimmerLink\r\n    };\r\n  }\r\n\r\n  function SemanticDimmerLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      var settings = scope.settings || {};\r\n\r\n      SemanticUI.linkSettings( scope, element, attributes, 'dimmer' );\r\n\r\n      // If the visible attribute is specified, listen to onHide and update modal when variable changes.\r\n      if ( attributes.visible )\r\n      {\r\n        var visibleWatcher = SemanticUI.watcher( scope, 'visible',\r\n          function(updated) {\r\n            element.dimmer( updated ? 'show' : 'hide' );\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onShow',\r\n          function(value) {\r\n            visibleWatcher.set( true );\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onHide',\r\n          function(value) {\r\n            visibleWatcher.set( false );\r\n          }\r\n        );\r\n      }\r\n\r\n      SemanticUI.linkEvents( scope, settings, $.fn.dimmer.settings, {\r\n        onShow:   'onShow',\r\n        onHide:   'onHide',\r\n        onChange: 'onChange'\r\n      });\r\n\r\n      element.dimmer( settings );\r\n\r\n      if ( angular.isFunction( scope.onInit ) ) {\r\n        scope.onInit( element );\r\n      }\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-dimmer', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticEmbedLink', ['SemanticUI', SemanticEmbedLink])\r\n    .directive('smEmbedBind', ['SemanticUI', SemanticEmbedBind])\r\n    .directive('smEmbed', ['SemanticEmbedLink', SemanticEmbed])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smEmbedReset:     'reset',\r\n    smEmbedShow:      'show',\r\n    smEmbedHide:      'hide',\r\n    smEmbedDestroy:   'destroy'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'embed', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticEmbedBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smEmbedBind', 'embed' );\r\n  }\r\n\r\n  function SemanticEmbed(SemanticEmbedLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        /* Optional */\r\n        source: '@',\r\n        sourceId: '@',\r\n        url: '@',\r\n        placeholder: '@',\r\n        icon: '@',\r\n        settings: '=',\r\n        onInit: '=',\r\n        /* Events */\r\n        onCreate: '=',\r\n        onDisplay: '=',\r\n        onPlaceholderDisplay: '=',\r\n        onEmbed: '='\r\n      },\r\n\r\n      template: '<div class=\"ui embed\"></div>',\r\n\r\n      link: SemanticEmbedLink\r\n    };\r\n  }\r\n\r\n  function SemanticEmbedLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      var settings = scope.settings || {};\r\n\r\n      SemanticUI.linkSettings( scope, element, attributes, 'embed' );\r\n\r\n      if ( scope.source ) settings.source = scope.source;\r\n      if ( scope.sourceId ) settings.id = scope.sourceId;\r\n      if ( scope.placeholder ) settings.placeholder = scope.placeholder;\r\n      if ( scope.icon ) settings.icon = scope.icon;\r\n      if ( scope.url ) settings.url = scope.url;\r\n\r\n      SemanticUI.linkEvents( scope, settings, $.fn.embed.settings, {\r\n        onCreate:             'onCreate',\r\n        onDisplay:            'onDisplay',\r\n        onPlaceholderDisplay: 'onPlaceholderDisplay',\r\n        onEmbed:              'onEmbed'\r\n      });\r\n\r\n      element.embed( settings );\r\n\r\n      if ( angular.isFunction( scope.onInit ) ) {\r\n        scope.onInit( element );\r\n      }\r\n    };\r\n  }\r\n\r\n\r\n})( angular.module('semantic-ui-embed', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticListLink', ['SemanticUI', SemanticListLink])\r\n    .directive('smList', ['SemanticUI', 'SemanticListLink', SemanticList])\r\n  ;\r\n\r\n  function SemanticList(SemanticUI, SemanticListLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      scope:\r\n      {\r\n        /* Required */\r\n        items: '=',\r\n        /* Optional */\r\n        description: '&',\r\n        icon: '&',\r\n        image: '&',\r\n        header: '&',\r\n        headerHref: '&',\r\n        children: '&',\r\n        onHeader: '&',\r\n        /* Private */\r\n        has: '=?'\r\n      },\r\n\r\n      template: [\r\n        '<div class=\"ui list\">',\r\n        ' <div class=\"item\" ng-repeat=\"i in items\" ng-init=\"$ = {item: i}\">',\r\n        '   <i ng-if=\"has.icon\" class=\"icon {{ icon($) }}\"></i>',\r\n        '   <img ng-if=\"has.image\" class=\"ui avatar image\" ng-src=\"{{ image($) }}\">',\r\n        '   <div ng-if=\"has.header || has.children\" class=\"content\">',\r\n        '     <div ng-if=\"!has.headerLink\" class=\"header\" sm-html=\"header($)\"></div>',\r\n        '     <a ng-if=\"has.headerLink\" class=\"header\" ng-href=\"{{ headerHref($) }}\" ng-click=\"onHeader($)\" sm-html=\"header($)\"></a>',\r\n        '     <div class=\"description\" sm-html=\"description($)\"></div>',\r\n        '     <sm-list ng-if=\"has.children && getChildCount($)\" has=\"has\" items=\"children($)\" description=\"description({item: item})\" icon=\"icon({item: item})\" header=\"header({item: item})\" header-href=\"headerHref({item: item})\" children=\"children({item: item})\" on-header=\"onHeader({item: item})\"></sm-list>',\r\n        '   </div>',\r\n        '   <div ng-if=\"!has.header && !has.children\" class=\"content\" sm-html=\"description($)\"></div>',\r\n        ' </div>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      compile: SemanticUI.RecursiveCompiler(SemanticListLink)\r\n    }\r\n  }\r\n\r\n  function SemanticListLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      if ( !scope.has )\r\n      {\r\n        scope.has = {\r\n          icon:         !!attributes.icon,\r\n          image:        !!attributes.image,\r\n          header:       !!attributes.header,\r\n          headerLink:   !!attributes.headerHref,\r\n          description:  !!attributes.description,\r\n          children:     !!attributes.children\r\n        };\r\n      }\r\n\r\n      scope.getChildCount = function($)\r\n      {\r\n        var children = scope.children($);\r\n\r\n        return children ? children.length : 0;\r\n      };\r\n\r\n      SemanticUI.setDefaultFunction( scope, 'description', attributes, function(locals){return locals.item} );\r\n      SemanticUI.setDefaultFunction( scope, 'icon', attributes, function(locals){return locals.item.icon} );\r\n      SemanticUI.setDefaultFunction( scope, 'header', attributes, function(locals){return locals.item.header} );\r\n      SemanticUI.setDefaultFunction( scope, 'children', attributes, function(locals){return locals.item.children} );\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-list', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .controller('SemanticMenuController', ['$scope', SemanticMenuController])\r\n    .directive('smMenu', ['SemanticUI', SemanticMenu])\r\n  ;\r\n\r\n  function SemanticMenu(SemanticUI)\r\n  {\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        /* Required */\r\n        items: '=',\r\n        label: '&',\r\n        /* Optional */\r\n        onClick: '&',\r\n        children: '&',\r\n        description: '&',\r\n        icon: '&',\r\n        hidden: '&',\r\n        divider: '&'\r\n      },\r\n      template: [\r\n        '<div class=\"menu\">',\r\n          '<div ng-repeat=\"i in items\" ng-hide=\"isHidden( i )\" ng-class=\"{item: !isDivider( i ), divider: isDivider( i )}\" ng-click=\"onClick({item: i, $event:$event})\">',\r\n            '<i class=\"{{ getIcon( i ) }} icon\" ng-if=\"getIcon( i )\"></i>',\r\n            '<span class=\"description\" ng-if=\"getDescription( i )\">{{ getDescription( i ) }}</span>',\r\n            '{{ getLabel( i ) }}',\r\n            '<sm-menu ng-if=\"hasChildren( i )\" items=\"getChildren( i )\" label=\"getLabel( item )\" children=\"getChildren( item )\" description=\"getDescription( item )\" icon=\"getIcon( item )\" hidden=\"isHidden( item )\" divider=\"isDivider( item )\" on-click=\"onClick({item: item, $event: $event})\"></sm-menu>',\r\n          '</div>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      controller: 'SemanticMenuController',\r\n\r\n      compile: SemanticUI.RecursiveCompiler()\r\n    };\r\n  }\r\n\r\n  function SemanticMenuController($scope)\r\n  {\r\n    $scope.hasChildren = function(item) {\r\n      var children = $scope.children({item: item});\r\n      return children && children.length;\r\n    };\r\n    $scope.getChildren = function(item) {\r\n      return $scope.children({item: item});\r\n    };\r\n\r\n    $scope.getLabel = function(item) {\r\n      return $scope.label({item: item});\r\n    };\r\n    $scope.getIcon = function(item) {\r\n      return $scope.icon({item: item});\r\n    }\r\n    $scope.getDescription = function(item) {\r\n      return $scope.description({item: item});\r\n    };\r\n    $scope.isHidden = function(item) {\r\n      return $scope.hidden({item: item});\r\n    };\r\n    $scope.isDivider = function(item) {\r\n      return $scope.divider({item: item});\r\n    };\r\n  }\r\n\r\n\r\n})( angular.module('semantic-ui-menu', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticModalLink', ['SemanticUI', SemanticModalLink])\r\n    .directive('smModalBind', ['SemanticUI', SemanticModalBind])\r\n    .directive('smModal', ['SemanticModalLink', SemanticModal])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smModalShow:        'show',\r\n    smModalHide:        'hide',\r\n    smModalToggle:      'toggle',\r\n    smModalRefresh:     'refresh',\r\n    smModalShowDimmer:  'show dimmer',\r\n    smModalHideDimmer:  'hide dimmer',\r\n    smModalHideOthers:  'hide others',\r\n    smModalHideAll:     'hide all',\r\n    smModalCacheSizes:  'cache sizes',\r\n    smModalSetActive:   'set active'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'modal', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticModalBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smModalBind', 'modal' );\r\n  }\r\n\r\n  function SemanticModal(SemanticModalLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        /* Optional */\r\n        visible: '=',\r\n        settings: '=',\r\n        onInit: '=',\r\n        /* Events */\r\n        onShow: '=',\r\n        onVisible: '=',\r\n        onHide: '=',\r\n        onHidden: '=',\r\n        onApprove: '=',\r\n        onDeny: '='\r\n      },\r\n\r\n      template: '<div class=\"ui modal\" ng-transclude></div>',\r\n\r\n      link: SemanticModalLink\r\n    }\r\n  }\r\n\r\n  function SemanticModalLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      var settings = scope.settings || {};\r\n\r\n      SemanticUI.linkSettings( scope, element, attributes, 'modal' );\r\n\r\n      // If the visible attribute is specified, listen to onHide and update modal when variable changes.\r\n      if ( attributes.visible )\r\n      {\r\n        var visibleWatcher = SemanticUI.watcher( scope, 'visible',\r\n          function(updated) {\r\n            element.modal( updated ? 'show' : 'hide' );\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onHide',\r\n          function() {\r\n            visibleWatcher.set( false );\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onShow',\r\n          function() {\r\n            visibleWatcher.set( true );\r\n          }\r\n        );\r\n      }\r\n\r\n      SemanticUI.linkEvents( scope, settings, $.fn.modal.settings, {\r\n        onShow:    'onShow',\r\n        onVisible: 'onVisible',\r\n        onHide:    'onHide',\r\n        onHidden:  'onHidden',\r\n        onApprove: 'onApprove',\r\n        onDeny:    'onDeny'\r\n      });\r\n\r\n      // Initialize the element with the given settings.\r\n      element.modal( settings );\r\n\r\n      if ( angular.isFunction( scope.onInit ) ) {\r\n        scope.onInit( element );\r\n      }\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-modal', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticProgressLink', ['SemanticUI', SemanticProgressLink])\r\n    .directive('smProgressBind', ['SemanticUI', SemanticModalBind])\r\n    .directive('smProgress', ['SemanticProgressLink', SemanticProgress])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    'smProgressIncrement': 'increment'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'progress', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticModalBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smProgressBind', 'progress' );\r\n  }\r\n\r\n  function SemanticProgress(SemanticProgressLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        /* Required */\r\n        model: '=',\r\n        /* Optional */\r\n        total: '=',\r\n        label: '@',\r\n        activeText: '@',\r\n        successText: '@',\r\n        errorText: '@',\r\n        warningText: '@',\r\n        duration: '@',\r\n        onInit: '=',\r\n        /* Events */\r\n        onChange: '=',\r\n        onSuccess: '=',\r\n        onActive: '=',\r\n        onError: '=',\r\n        onWarning: '='\r\n      },\r\n\r\n      template: [\r\n        '<div class=\"ui progress\">',\r\n        '  <div class=\"bar\">',\r\n        '    <div class=\"progress\" ng-show=\"label\"></div>',\r\n        '  </div>',\r\n        '  <div class=\"label\" ng-transclude></div>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      link: SemanticProgressLink\r\n    };\r\n  }\r\n\r\n  function SemanticProgressLink(SemanticUI)\r\n  {\r\n    var addText = function( scope, attributes, settings, attribute, property )\r\n    {\r\n      if ( angular.isDefined( attributes[ attribute ] ) )\r\n      {\r\n        settings.text = settings.text || {};\r\n        settings.text[ property ] = scope[ attribute ];\r\n      }\r\n    };\r\n\r\n    return function(scope, element, attributes)\r\n    {\r\n      var settings = scope.settings || {};\r\n\r\n      SemanticUI.linkSettings( scope, element, attributes, 'progress' );\r\n\r\n      SemanticUI.linkEvents( scope, settings, $.fn.progress.settings, {\r\n        onChange:   'onChange',\r\n        onSuccess:  'onSuccess',\r\n        onActive:   'onActive',\r\n        onError:    'onError',\r\n        onWarning:  'onWarning'\r\n      });\r\n\r\n      if ( !angular.isDefined( settings.showActivity ) )\r\n      {\r\n        settings.showActivity = false;\r\n      }\r\n\r\n      if ( angular.isDefined( attributes.label ) )\r\n      {\r\n        settings.label = scope.label;\r\n      }\r\n\r\n      if ( angular.isDefined( attributes.total ) )\r\n      {\r\n        settings.total = scope.total;\r\n      }\r\n      else\r\n      {\r\n        settings.total = 100;\r\n      }\r\n\r\n      if ( angular.isDefined( attributes.model ) )\r\n      {\r\n        settings.value = scope.model;\r\n      }\r\n\r\n      addText( scope, attributes, settings, 'activeText', 'active' );\r\n      addText( scope, attributes, settings, 'successText', 'success' );\r\n      addText( scope, attributes, settings, 'errorText', 'error' );\r\n      addText( scope, attributes, settings, 'warningText', 'warning' );\r\n\r\n      element.progress( settings );\r\n\r\n      SemanticUI.watcher( scope, 'model', function(value)\r\n      {\r\n        var total = element.progress( 'get total' ) || 100;\r\n\r\n        element.progress( 'set percent', value * 100 / total );\r\n        element.progress( 'set value', value );\r\n      });\r\n\r\n      if ( angular.isDefined( attributes.duration ) )\r\n      {\r\n        SemanticUI.watcher( scope, 'duration', function(duration)\r\n        {\r\n          element.progress( 'set duration', duration );\r\n        });\r\n      }\r\n\r\n      if ( angular.isDefined( attributes.total ) )\r\n      {\r\n        SemanticUI.watcher( scope, 'total', function(total)\r\n        {\r\n          element.progress( 'set total', total );\r\n        });\r\n      }\r\n\r\n      if ( angular.isFunction( scope.onInit ) )\r\n      {\r\n        scope.onInit( element );\r\n      }\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-progress', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticPopupLink', ['SemanticUI', SemanticPopupLink])\r\n    .factory('SemanticPopupInlineLink', ['SemanticUI', SemanticPopupInlineLink])\r\n    .factory('SemanticPopupDisplayLink', ['SemanticUI', SemanticPopupDisplayLink])\r\n    .directive('smPopupBind', ['SemanticUI', SemanticModalBind])\r\n    .directive('smPopup', ['SemanticPopupLink', SemanticPopup])\r\n    .directive('smPopupInline', ['SemanticPopupInlineLink', SemanticPopupInline])\r\n    .directive('smPopupDisplay', ['SemanticPopupDisplayLink', SemanticPopupDisplay])\r\n    .directive('smPopupDetached', [SemanticPopupDetached])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smPopupShow:        'show',\r\n    smPopupHide:        'hide',\r\n    smPopupHideAll:     'hide all',\r\n    smPopupToggle:      'toggle',\r\n    smPopupReposition:  'reposition',\r\n    smPopupDestroy:     'destroy',\r\n    smPopupRemove:      'remove popup'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'popup', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticModalBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smPopupBind', 'popup' );\r\n  }\r\n\r\n  // An attribute directive which displays a popup for this element.\r\n  function SemanticPopup(SemanticPopupLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'A',\r\n\r\n      scope: {\r\n        /* Required */\r\n        smPopup: '=',\r\n        /* Optional */\r\n        smPopupTitle: '=',\r\n        smPopupHtml: '=',\r\n        smPopupPosition: '@',\r\n        smPopupVariation: '@',\r\n        smPopupSettings: '=',\r\n        smPopupOnInit: '=',\r\n        /* Events */\r\n        smPopupOnCreate: '=',\r\n        smPopupOnRemove: '=',\r\n        smPopupOnShow: '=',\r\n        smPopupOnVisible: '=',\r\n        smPopupOnHide: '=',\r\n        smPopupOnHidden: '='\r\n      },\r\n\r\n      link: SemanticPopupLink\r\n    };\r\n  }\r\n\r\n  function SemanticPopupLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      var settings = scope.smPopupSettings || {};\r\n\r\n      SemanticUI.linkSettings( scope, element, attributes, 'popup', false, 'smPopupSettings' );\r\n\r\n      SemanticUI.bindAttribute( scope, 'smPopup', element, 'data-content' );\r\n      SemanticUI.bindAttribute( scope, 'smPopupTitle', element, 'data-title' );\r\n      SemanticUI.bindAttribute( scope, 'smPopupHtml', element, 'data-html' );\r\n      SemanticUI.bindAttribute( scope, 'smPopupPosition', element, 'data-position' );\r\n      SemanticUI.bindAttribute( scope, 'smPopupVariation', element, 'data-variation' );\r\n\r\n      SemanticUI.linkEvents( scope, settings, {\r\n        onCreate:  'smPopupOnCreate',\r\n        onRemove:  'smPopupOnRemove',\r\n        onShow:    'smPopupOnShow',\r\n        onVisible: 'smPopupOnVisible',\r\n        onHide:    'smPopupOnHide',\r\n        onHidden:  'smPopupOnHidden'\r\n      });\r\n\r\n      element.popup( settings );\r\n\r\n      if ( angular.isFunction( scope.smPopupOnInit ) )\r\n      {\r\n        scope.smPopupOnInit( element );\r\n      }\r\n    };\r\n  }\r\n\r\n  // An attribute directive to show the detached popup which follows this element.\r\n  function SemanticPopupInline(SemanticPopupInlineLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'A',\r\n\r\n      scope: {\r\n        /* Optional */\r\n        smPopupInline: '=',\r\n        smPopupInlineOnInit: '=',\r\n        /* Events */\r\n        smPopupInlineOnCreate: '=',\r\n        smPopupInlineOnRemove: '=',\r\n        smPopupInlineOnShow: '=',\r\n        smPopupInlineOnVisible: '=',\r\n        smPopupInlineOnHide: '=',\r\n        smPopupInlineOnHidden: '='\r\n      },\r\n\r\n      link: SemanticPopupInlineLink\r\n    };\r\n  }\r\n\r\n  function SemanticPopupInlineLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      var settings = scope.smPopupInline || {};\r\n\r\n      SemanticUI.linkSettings( scope, element, attributes, 'popup', false, 'smPopupInline' );\r\n\r\n      SemanticUI.linkEvents( scope, settings, {\r\n        onCreate:  'smPopupInlineOnCreate',\r\n        onRemove:  'smPopupInlineOnRemove',\r\n        onShow:    'smPopupInlineOnShow',\r\n        onVisible: 'smPopupInlineOnVisible',\r\n        onHide:    'smPopupInlineOnHide',\r\n        onHidden:  'smPopupInlineOnHidden'\r\n      });\r\n\r\n      settings.inline = true;\r\n\r\n      element.popup( settings );\r\n\r\n      if ( angular.isFunction( scope.smPopupInlineOnInit ) ) {\r\n        scope.smPopupInlineOnInit( element );\r\n      }\r\n    };\r\n  }\r\n\r\n  // An attribute directive to show a detached popup over this element given it's name.\r\n  function SemanticPopupDisplay(SemanticPopupDisplayLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'A',\r\n\r\n      scope: {\r\n        /* Required */\r\n        smPopupDisplay: '@',\r\n        /* Optional */\r\n        smPopupDisplaySettings: '=',\r\n        smPopupDisplayOnInit: '=',\r\n        /* Events */\r\n        smPopupDisplayOnCreate: '=',\r\n        smPopupDisplayOnRemove: '=',\r\n        smPopupDisplayOnShow: '=',\r\n        smPopupDisplayOnVisible: '=',\r\n        smPopupDisplayOnHide: '=',\r\n        smPopupDisplayOnHidden: '='\r\n      },\r\n\r\n      link: SemanticPopupDisplayLink\r\n    };\r\n  }\r\n\r\n  function SemanticPopupDisplayLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      var settings = scope.smPopupDisplaySettings || {};\r\n\r\n      SemanticUI.linkSettings( scope, element, attributes, 'popup', false, 'smPopupDisplaySettings' );\r\n\r\n      SemanticUI.linkEvents( scope, settings, $.fn.popup.settings, {\r\n        onCreate:  'smPopupDisplayOnCreate',\r\n        onRemove:  'smPopupDisplayOnRemove',\r\n        onShow:    'smPopupDisplayOnShow',\r\n        onVisible: 'smPopupDisplayOnVisible',\r\n        onHide:    'smPopupDisplayOnHide',\r\n        onHidden:  'smPopupDisplayOnHidden'\r\n      });\r\n\r\n      settings.popup = '[data-popup-named=\"' + attributes.smPopupDisplay + '\"]';\r\n\r\n      element.popup( settings );\r\n\r\n      if ( angular.isFunction( scope.smPopupDisplayOnInit ) ) {\r\n        scope.smPopupDisplayOnInit( element );\r\n      }\r\n    };\r\n  }\r\n\r\n  // An element directive for a popup, can be used after an element or can be named and used with sm-popup-display.\r\n  function SemanticPopupDetached()\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        name: '@'\r\n      },\r\n\r\n      template: '<div class=\"ui popup\" data-popup-named=\"{{ name }}\" ng-transclude></div>'\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-popup', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticRatingLink', ['SemanticUI', SemanticRatingLink])\r\n    .directive('smRatingBind', ['SemanticUI', SemanticRatingBind])\r\n    .directive('smRating', ['SemanticRatingLink', SemanticRating])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smRatingSet:        'set rating',\r\n    smRatingDisable:    'disable',\r\n    smRatingEnable:     'enable',\r\n    smRatingClear:      'clear rating'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'rating', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticRatingBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smRatingBind', 'rating' );\r\n  }\r\n\r\n  function SemanticRating(SemanticRatingLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      scope: {\r\n        /* Required */\r\n        model: '=',\r\n        total: '=',\r\n        /* Optional */\r\n        type: '@',\r\n        disabled: '=',\r\n        settings: '=',\r\n        onInit: '=',\r\n        /* Events */\r\n        onRate: '='\r\n      },\r\n\r\n      template: '<div class=\"ui rating {{ type }}\" data-rating=\"{{ model }}\" data-max-rating=\"{{ total }}\"></div>',\r\n\r\n      link: SemanticRatingLink\r\n    };\r\n  }\r\n\r\n  function SemanticRatingLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      element.ready(function()\r\n      {\r\n        var settings = scope.settings || {};\r\n\r\n        SemanticUI.linkSettings( scope, element, attributes, 'rating', true );\r\n\r\n        SemanticUI.triggerChange( scope, 'model', element, true );\r\n\r\n        if ( attributes.disabled )\r\n        {\r\n          var disabledWatcher = SemanticUI.watcher( scope, 'disabled',\r\n            function(updated) {\r\n              element.rating( updated ? 'disable' : 'enable' );\r\n            }\r\n          );\r\n        }\r\n\r\n        var valueWatcher = SemanticUI.watcher( scope, 'model',\r\n          function(updated) {\r\n            element.rating( 'set rating', updated );\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onRate',\r\n          function(value) {\r\n            valueWatcher.set( value );\r\n          }\r\n        );\r\n\r\n        SemanticUI.linkEvents( scope, settings, $.fn.rating.settings, {\r\n          onRate: 'onRate'\r\n        });\r\n\r\n        element.rating( settings );\r\n\r\n        if ( scope.disabled )\r\n        {\r\n          element.rating( 'disable' );\r\n        }\r\n\r\n        if ( angular.isFunction( scope.onInit ) ) {\r\n          scope.onInit( element );\r\n        }\r\n      });\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-rating', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticSearchLink', ['SemanticUI', SemanticSearchLink])\r\n    .directive('smSearchBind', ['SemanticUI', SemanticSearchBind])\r\n    .directive('smSearch', ['SemanticSearchLink', SemanticSearch])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smSearchQuery:        'query',\r\n    smSearchCancelQuery:  'cancel query',\r\n    smSearchSearchLocal:  'search local',\r\n    smSearchSearchRemote: 'search remote',\r\n    smSearchSet:          'set value',\r\n    smSearchShowResults:  'show results',\r\n    smSearchHideResults:  'hide results',\r\n    smSearchDestroy:      'destroy'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'search', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticSearchBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smSearchBind', 'search' );\r\n  }\r\n\r\n  function SemanticSearch(SemanticSearchLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      scope: {\r\n        /* Required */\r\n        model: '=',\r\n        /* Optional */\r\n        text: '=?',\r\n        icon: '@',\r\n        placeholder: '@',\r\n        category: '@',\r\n        local: '=',\r\n        remote: '@',\r\n        settings: '=',\r\n        onInit: '=',\r\n        /* Events */\r\n        onSelect: '=',\r\n        onResultsAdd: '=',\r\n        onSearchQuery: '=',\r\n        onResults: '=',\r\n        onResultsOpen: '=',\r\n        onResultsClose: '='\r\n      },\r\n\r\n      template: [\r\n        '<div class=\"ui search\" ng-class=\"{category: category}\">',\r\n        '  <div class=\"ui input\" ng-class=\"{icon: icon}\">',\r\n        '    <input class=\"prompt\" type=\"text\" placeholder=\"{{ placeholder }}\" ng-model=\"text\">',\r\n        '    <i ng-if=\"icon\" class=\"{{ icon }} icon\"></i>',\r\n        '  </div>',\r\n        '  <div class=\"results\"></div>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      link: SemanticSearchLink\r\n    };\r\n  }\r\n\r\n  function SemanticSearchLink(SemanticUI)\r\n  {\r\n    var defaultTitle = $.fn.search && $.fn.search.settings && $.fn.search.settings.fields ? $.fn.search.settings.fields.title : '';\r\n\r\n    return function(scope, element, attributes)\r\n    {\r\n      var settings = scope.settings || {};\r\n      var textProperty = settings.fields && settings.fields.title ? settings.fields.title : defaultTitle;\r\n\r\n      SemanticUI.linkSettings( scope, element, attributes, 'search' );\r\n\r\n      if ( scope.local ) settings.source = scope.local;\r\n      if ( scope.remote ) settings.apiSettings = { url: scope.remote };\r\n      if ( scope.category ) settings.type = 'category';\r\n\r\n      var modelWatcher = SemanticUI.watcher( scope, 'model',\r\n        function(value) {\r\n          element.search( 'set value', value && (textProperty in value) ? value[ textProperty ] : value );\r\n        }\r\n      );\r\n\r\n      SemanticUI.onEvent( settings, 'onSelect',\r\n        function(result, response) {\r\n          modelWatcher.set( result );\r\n          if ( attributes.text ) {\r\n            scope.$evalAsync(function() {\r\n              scope.text = result[ textProperty ];\r\n            });\r\n          }\r\n        }\r\n      );\r\n\r\n      SemanticUI.linkEvents( scope, settings, $.fn.search.settings, {\r\n        onSelect:         'onSelect',\r\n        onResultsAdd:     'onResultsAdd',\r\n        onSearchQuery:    'onSearchQuery',\r\n        onResults:        'onResults',\r\n        onResultsOpen:    'onResultsOpen',\r\n        onResultsClose:   'onResultsClose'\r\n      });\r\n\r\n      element.search( settings );\r\n\r\n      if ( angular.isFunction( scope.onInit ) ) {\r\n        scope.onInit( element );\r\n      }\r\n\r\n      if ( scope.model && attributes.text && textProperty in scope.model ) {\r\n        scope.text = scope.model[ textProperty ];\r\n      }\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-search', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticShapeLink', ['SemanticUI', SemanticShapeLink])\r\n    .directive('smShapeBind', ['SemanticUI', SemanticShapeBind])\r\n    .directive('smShape', ['SemanticShapeLink', SemanticShape])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smShapeFlipUp:          'flip up',\r\n    smShapeFlipDown:        'flip down',\r\n    smShapeFlipLeft:        'flip left',\r\n    smShapeFlipRight:       'flip right',\r\n    smShapeFlipOver:        'flip over',\r\n    smShapeFlipBack:        'flip back',\r\n    smShapeSetNextSide:     'set next side',\r\n    smShapeReset:           'reset',\r\n    smShapeQueue:           'queue',\r\n    smShapeRepaint:         'repaint',\r\n    smShapeSetDefaultSide:  'set default side',\r\n    smShapeSetStageSize:    'set stage size',\r\n    smShapeRefresh:         'refresh'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'shape', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticShapeBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smShapeBind', 'shape' );\r\n  }\r\n\r\n  function SemanticShape(SemanticShapeLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n\r\n        settings: '=',\r\n        onInit: '=',\r\n        /* Events */\r\n        onBeforeChange: '=',\r\n        onChange: '=',\r\n      },\r\n\r\n      template: [\r\n        '<div class=\"ui shape\">',\r\n        ' <div class=\"sides\" ng-transclude>',\r\n        ' </div>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      link: SemanticShapeLink\r\n\r\n    };\r\n  }\r\n\r\n  function SemanticShapeLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      var settings = scope.settings || {};\r\n\r\n      SemanticUI.linkSettings( scope, element, attributes, 'shape' );\r\n\r\n      SemanticUI.linkEvents( scope, settings, $.fn.shape.settings, {\r\n        onBeforeChange:   'onBeforeChange',\r\n        onChange:         'onChange'\r\n      });\r\n\r\n      element.shape( settings );\r\n\r\n      if ( angular.isFunction( scope.onInit ) ) {\r\n        scope.onInit( element );\r\n      }\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-shape', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticSidebarLink', ['SemanticUI', SemanticSidebarLink])\r\n    .directive('smSidebarBind', ['SemanticUI', SemanticSidebarBind])\r\n    .directive('smSidebar', ['SemanticSidebarLink', SemanticSidebar])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smSidebarShow:           'show',\r\n    smSidebarHide:           'hide',\r\n    smSidebarToggle:         'toggle',\r\n    smSidebarPushPage:       'push page',\r\n    smSidebarPullPage:       'pull page',\r\n    smSidebarAddBodyCss:     'add body css',\r\n    smSidebarRemoveBodyCss:  'remove body css'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'sidebar', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticSidebarBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smSidebarBind', 'sidebar' );\r\n  }\r\n\r\n  function SemanticSidebar(SemanticSidebarLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      scope: {\r\n        /* Required */\r\n        items: '=',\r\n        label: '&',\r\n        /* Optional */\r\n        onClick: '&',\r\n        visible: '=',\r\n        settings: '=',\r\n        onInit: '=',\r\n        /* Events */\r\n        onVisible: '=',\r\n        onShow: '=',\r\n        onChange: '=',\r\n        onHide: '=',\r\n        onHidden: '='\r\n      },\r\n\r\n      template: [\r\n        '<div class=\"ui sidebar\">',\r\n        ' <a class=\"item\" ng-repeat=\"i in items\" sm-html=\"label({item:i})\" ng-click=\"onClick({item:i, $event:$event})\"></a>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      link: SemanticSidebarLink\r\n    };\r\n  }\r\n\r\n  function SemanticSidebarLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      var settings = scope.settings || {};\r\n\r\n      SemanticUI.setDefaultFunction( scope, 'label', attributes, function(locals){return locals.item} );\r\n\r\n      SemanticUI.linkSettings( scope, element, attributes, 'sidebar' );\r\n\r\n      if ( attributes.visible )\r\n      {\r\n        var visibleWatcher = SemanticUI.watcher( scope, 'visible',\r\n          function(updated) {\r\n            element.sidebar( updated ? 'show' : 'hide' );\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onHide',\r\n          function() {\r\n            visibleWatcher.set( false );\r\n          }\r\n        );\r\n\r\n        SemanticUI.onEvent( settings, 'onShow',\r\n          function() {\r\n            visibleWatcher.set( true );\r\n          }\r\n        );\r\n      }\r\n\r\n      SemanticUI.linkEvents( scope, settings, $.fn.sidebar.settings, {\r\n        onVisible: 'onVisible',\r\n        onShow:    'onShow',\r\n        onChange:  'onChange',\r\n        onHide:    'onHide',\r\n        onHidden:  'onHidden'\r\n      });\r\n\r\n      var pusher = $('.pusher');\r\n\r\n      if ( pusher.length )\r\n      {\r\n        element.insertBefore( pusher );\r\n      }\r\n\r\n      // Initialize the element with the given settings.\r\n      element.sidebar( settings );\r\n\r\n      if ( scope.visible )\r\n      {\r\n        element.sidebar( 'show' );\r\n      }\r\n\r\n      if ( angular.isFunction( scope.onInit ) )\r\n      {\r\n        scope.onInit( element );\r\n      }\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-sidebar', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticStickyLink', ['SemanticUI', SemanticStickyLink])\r\n    .directive('smStickyBind', ['SemanticUI', SemanticStickyBind])\r\n    .directive('smSticky', ['SemanticStickyLink', SemanticSticky])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smStickyRefresh:   'refresh'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'sticky', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticStickyBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smStickyBind', 'sticky' );\r\n  }\r\n\r\n  function SemanticSticky(SemanticStickyLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        /* Optional */\r\n        context: '@',\r\n        settings: '=',\r\n        onInit: '=',\r\n        /* Events */\r\n        onReposition: '=',\r\n        onScroll: '=',\r\n        onStick: '=',\r\n        onUnstick: '=',\r\n        onTop: '=',\r\n        onBottom: '='\r\n      },\r\n\r\n      template: '<div class=\"ui sticky\" ng-transclude></div>',\r\n\r\n      link: SemanticStickyLink\r\n    };\r\n  }\r\n\r\n  function SemanticStickyLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      element.ready(function()\r\n      {\r\n        var settings = scope.settings || {};\r\n\r\n        SemanticUI.linkSettings( scope, element, attributes, 'sticky', true );\r\n\r\n        SemanticUI.linkEvents( scope, settings, $.fn.sticky.settings, {\r\n          onReposition:   'onReposition',\r\n          onScroll:       'onScroll',\r\n          onStick:        'onStick',\r\n          onStick:        'onStick',\r\n          onTop:          'onTop',\r\n          onBottom:       'onBottom'\r\n        });\r\n\r\n        if ( !settings.context )\r\n        {\r\n          settings.context = scope.context;\r\n        }\r\n\r\n        element.sticky( settings );\r\n\r\n        if ( angular.isFunction( scope.onInit ) )\r\n        {\r\n          scope.onInit( element );\r\n        }\r\n      });\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-sticky', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .factory('SemanticTabMenuLink', ['SemanticUI', '$timeout', SemanticTabMenuLink])\r\n    .directive('smTabBind', ['SemanticUI', SemanticTabBind])\r\n    .directive('smTabMenu', ['SemanticTabMenuLink', SemanticTabMenu])\r\n    .directive('smTab', ['SemanticUI', SemanticTab])\r\n  ;\r\n\r\n  var BEHAVIORS = {\r\n    smTabSet:       'change tab'\r\n  };\r\n\r\n  angular.forEach( BEHAVIORS, function(method, directive)\r\n  {\r\n    app.directive( directive, ['SemanticUI', function(SemanticUI)\r\n    {\r\n      return SemanticUI.createBehavior( directive, 'tab', method );\r\n    }]);\r\n  });\r\n\r\n  function SemanticTabBind(SemanticUI)\r\n  {\r\n    return SemanticUI.createBind( 'smTabBind', 'tab' );\r\n  }\r\n\r\n  function SemanticTabMenu(SemanticTabMenuLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      scope: {\r\n        /* Required */\r\n        tabs: '=',\r\n        /* Optional */\r\n        active: '=?',\r\n        settings: '='\r\n      },\r\n\r\n      template: [\r\n        '<div class=\"ui menu\">',\r\n        '  <a class=\"item\" ng-repeat=\"(name, title) in tabs\" ng-class=\"{active: name === active}\" data-tab=\"{{ name }}\" sm-html=\"title\"></a>',\r\n        '</div>'\r\n      ].join('\\n'),\r\n\r\n      link: SemanticTabMenuLink\r\n    }\r\n  }\r\n\r\n  function SemanticTabMenuLink(SemanticUI, $timeout)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      var setActiveTab = function( tab )\r\n      {\r\n        if ( tab )\r\n        {\r\n          element.tab( 'change tab', tab );\r\n        }\r\n      };\r\n\r\n      $timeout(function()\r\n      {\r\n        var settings = scope.settings || {};\r\n        var elements = element.children('.item');\r\n        var hasActive = !!attributes.active;\r\n\r\n        SemanticUI.linkSettings( scope, elements, attributes, 'tab', true );\r\n\r\n        if ( hasActive )\r\n        {\r\n          var activeWatcher = SemanticUI.watcher( scope, 'active',\r\n            function( tab ) {\r\n              setActiveTab( tab );\r\n            }\r\n          );\r\n\r\n          SemanticUI.onEvent( settings, 'onVisible',\r\n            function(tab) {\r\n              activeWatcher.set( tab );\r\n            }\r\n          );\r\n        }\r\n\r\n        elements.tab( settings );\r\n\r\n        if ( hasActive )\r\n        {\r\n          setActiveTab( scope.active );\r\n        }\r\n      });\r\n    };\r\n  }\r\n\r\n  function SemanticTab(SemanticUI)\r\n  {\r\n    return {\r\n\r\n      restrict: 'E',\r\n\r\n      replace: true,\r\n\r\n      transclude: true,\r\n\r\n      scope: {\r\n        name: '@'\r\n      },\r\n\r\n      template: '<div class=\"ui tab\" data-tab=\"{{ name }}\" ng-transclude></div>'\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-tab', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  app\r\n    .directive('smTimeAgo', SemanticTimeAgo)\r\n  ;\r\n\r\n  function SemanticTimeAgo()\r\n  {\r\n    var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    var THS = ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'];\r\n    var HOURS = ['12', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'];\r\n\r\n    function getTime(date)\r\n    {\r\n      var hours = date.getHours();\r\n      var minutes = date.getMinutes();\r\n      var minutesPadded = minutes < 10 ? '0' + minutes : minutes;\r\n\r\n      return HOURS[ hours % HOURS.length ] + ':' + minutesPadded + ( hours < 12 ? 'AM' : 'PM' );\r\n    }\r\n\r\n    function getTh(x)\r\n    {\r\n      return (x >= 11 && x <= 13) ? (x + 'th') : x + THS[ x % THS.length ];\r\n    }\r\n\r\n    function getDaysAgo(date)\r\n    {\r\n      return Math.ceil( ( new Date().getTime() - date.getTime() ) / 86400000 );\r\n    }\r\n\r\n    return {\r\n\r\n      restrict: 'A',\r\n\r\n      link: function(scope, element, attributes)\r\n      {\r\n        var timeout = false;\r\n        var value = false;\r\n        var fuzzy = false;\r\n\r\n        var updateText = function()\r\n        {\r\n          var now = new Date();\r\n          var today = new Date( now.getFullYear(), now.getMonth(), now.getDate() );\r\n          var yesterday = new Date( now.getFullYear(), now.getMonth(), now.getDate() - 1 );\r\n\r\n          var elapsed = now.getTime() - value.getTime();\r\n\r\n          var text = '';\r\n          var updateIn = false;\r\n\r\n          if ( elapsed < 60000 )\r\n          { // 1 minute\r\n            text = 'Just now';\r\n            updateIn = 60000 - elapsed;\r\n          }\r\n          else if ( elapsed < 3600000 )\r\n          { // 1 hour\r\n            var minutesAgo = Math.floor( elapsed / 60000 );\r\n            text = minutesAgo === 1 ? '1 minute ago' : minutesAgo + ' minutes ago';\r\n            updateIn = elapsed % 60000;\r\n          }\r\n          else if ( value.getTime() > today.getTime() )\r\n          { // today\r\n            text = 'Today at ' + getTime( value );\r\n            updateIn = elapsed % 3600000;\r\n          }\r\n          else if ( value.getTime() > yesterday.getTime() )\r\n          { // yesterday\r\n            text = 'Yesterday at ' + getTime( value );\r\n            updateIn = elapsed % 3600000;\r\n          }\r\n          else if ( value.getMonth() === now.getMonth() && value.getFullYear() === now.getFullYear() )\r\n          { // this month\r\n            text += 'The ' + getTh( value.getDate() );\r\n            text +=' at ' + getTime( value );\r\n            text += ' (' + getDaysAgo( value ) + ' days ago)';\r\n            updateIn = 86400000;\r\n          }\r\n          else\r\n          { // before the current month\r\n            text += MONTHS[ value.getMonth() ] + ' ' + getTh( value.getDate() );\r\n            if ( value.getFullYear() !== now.getFullYear() ) {\r\n              text += ' ' + value.getFullYear();\r\n            }\r\n            text += ' at ' + getTime( value );\r\n            var daysAgo = getDaysAgo( value );\r\n            if ( daysAgo <= 60 ) {\r\n              text += ' (' + getDaysAgo( value ) + ' days ago)'\r\n            }\r\n          }\r\n\r\n          element.text( text );\r\n\r\n          if ( timeout )\r\n          {\r\n            clearTimeout( timeout );\r\n            timeout = false;\r\n          }\r\n\r\n          if ( updateIn )\r\n          {\r\n            timeout = setTimeout(function()\r\n            {\r\n              timeout = false;\r\n              updateText();\r\n\r\n            }, updateIn);\r\n          }\r\n        };\r\n\r\n        scope.$watch( attributes.smTimeAgo, function(updated)\r\n        {\r\n          value = new Date( updated );\r\n          updateText();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n})( angular.module('semantic-ui-timeago', ['semantic-ui-core']) );\r\n","(function(app)\r\n{\r\n\r\n  // Transitions: scale, fade, flip, drop, fly, swing, browse, slide, jiggle, flash, shake, pulse, tada, bounce\r\n\r\n  app\r\n    .factory('SemanticTransitionLink', ['SemanticUI', SemanticTransitionLink])\r\n    .directive('smTransition', ['SemanticTransitionLink', SemanticTransition])\r\n  ;\r\n\r\n  function SemanticTransition(SemanticTransitionLink)\r\n  {\r\n    return {\r\n\r\n      restrict: 'A',\r\n\r\n      scope: {\r\n        smTransition: '@',\r\n        smTransitionEvents: '@',\r\n        smTransitionOther: '@'\r\n      },\r\n\r\n      link: SemanticTransitionLink\r\n    };\r\n  }\r\n\r\n  function SemanticTransitionLink(SemanticUI)\r\n  {\r\n    return function(scope, element, attributes)\r\n    {\r\n      scope.smTransitionEvents = scope.smTransitionEvents || 'click';\r\n\r\n      element.on( scope.smTransitionEvents, function()\r\n      {\r\n        ( scope.smTransitionOther ? $( scope.smTransitionOther ) : element ).transition( scope.smTransition );\r\n      });\r\n    };\r\n  }\r\n\r\n})( angular.module('semantic-ui-transition', ['semantic-ui-core']) );\r\n"]}